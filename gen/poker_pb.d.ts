// @generated by protoc-gen-es v1.3.1
// @generated from file poker.proto (package pokerhero, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message pokerhero.PingRequest
 */
export declare class PingRequest extends Message<PingRequest> {
  /**
   * @generated from field: string message = 1;
   */
  message: string;

  constructor(data?: PartialMessage<PingRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.PingRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest;

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean;
}

/**
 * @generated from message pokerhero.PongResponse
 */
export declare class PongResponse extends Message<PongResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message: string;

  constructor(data?: PartialMessage<PongResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.PongResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PongResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PongResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PongResponse;

  static equals(a: PongResponse | PlainMessage<PongResponse> | undefined, b: PongResponse | PlainMessage<PongResponse> | undefined): boolean;
}

/**
 * @generated from message pokerhero.Player
 */
export declare class Player extends Message<Player> {
  /**
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * @generated from field: int32 balance = 2;
   */
  balance: number;

  constructor(data?: PartialMessage<Player>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.Player";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Player;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Player;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Player;

  static equals(a: Player | PlainMessage<Player> | undefined, b: Player | PlainMessage<Player> | undefined): boolean;
}

/**
 * @generated from message pokerhero.CreateRoomRequest
 */
export declare class CreateRoomRequest extends Message<CreateRoomRequest> {
  /**
   * @generated from field: string creator_address = 1;
   */
  creatorAddress: string;

  /**
   * @generated from field: int32 big_blind = 2;
   */
  bigBlind: number;

  /**
   * @generated from field: int32 max_players = 3;
   */
  maxPlayers: number;

  /**
   * server auth
   *
   * @generated from field: string token = 4;
   */
  token: string;

  constructor(data?: PartialMessage<CreateRoomRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.CreateRoomRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoomRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoomRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoomRequest;

  static equals(a: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined, b: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined): boolean;
}

/**
 * @generated from message pokerhero.RoomRequest
 */
export declare class RoomRequest extends Message<RoomRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  constructor(data?: PartialMessage<RoomRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.RoomRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomRequest;

  static equals(a: RoomRequest | PlainMessage<RoomRequest> | undefined, b: RoomRequest | PlainMessage<RoomRequest> | undefined): boolean;
}

/**
 * @generated from message pokerhero.RoomsRequest
 */
export declare class RoomsRequest extends Message<RoomsRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner: string;

  constructor(data?: PartialMessage<RoomsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.RoomsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomsRequest;

  static equals(a: RoomsRequest | PlainMessage<RoomsRequest> | undefined, b: RoomsRequest | PlainMessage<RoomsRequest> | undefined): boolean;
}

/**
 * @generated from message pokerhero.RoomsResponse
 */
export declare class RoomsResponse extends Message<RoomsResponse> {
  /**
   * @generated from field: repeated pokerhero.RoomResponse rooms = 1;
   */
  rooms: RoomResponse[];

  constructor(data?: PartialMessage<RoomsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.RoomsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomsResponse;

  static equals(a: RoomsResponse | PlainMessage<RoomsResponse> | undefined, b: RoomsResponse | PlainMessage<RoomsResponse> | undefined): boolean;
}

/**
 * @generated from message pokerhero.RoomResponse
 */
export declare class RoomResponse extends Message<RoomResponse> {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: int32 min_buy_in = 2;
   */
  minBuyIn: number;

  /**
   * @generated from field: int32 big_blind = 3;
   */
  bigBlind: number;

  /**
   * @generated from field: repeated pokerhero.Player players = 4;
   */
  players: Player[];

  /**
   * @generated from field: string address = 5;
   */
  address: string;

  /**
   * @generated from field: string owner = 6;
   */
  owner: string;

  /**
   * @generated from field: int32 max_players = 7;
   */
  maxPlayers: number;

  constructor(data?: PartialMessage<RoomResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.RoomResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomResponse;

  static equals(a: RoomResponse | PlainMessage<RoomResponse> | undefined, b: RoomResponse | PlainMessage<RoomResponse> | undefined): boolean;
}

/**
 * @generated from message pokerhero.BalanceChange
 */
export declare class BalanceChange extends Message<BalanceChange> {
  /**
   * @generated from field: string player_address = 1;
   */
  playerAddress: string;

  /**
   * @generated from field: int32 bet = 2;
   */
  bet: number;

  /**
   * @generated from field: int32 win = 3;
   */
  win: number;

  constructor(data?: PartialMessage<BalanceChange>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.BalanceChange";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BalanceChange;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BalanceChange;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BalanceChange;

  static equals(a: BalanceChange | PlainMessage<BalanceChange> | undefined, b: BalanceChange | PlainMessage<BalanceChange> | undefined): boolean;
}

/**
 * @generated from message pokerhero.UpdateRoomRequest
 */
export declare class UpdateRoomRequest extends Message<UpdateRoomRequest> {
  /**
   * @generated from field: int32 room_id = 1;
   */
  roomId: number;

  /**
   * @generated from field: repeated pokerhero.BalanceChange changes = 2;
   */
  changes: BalanceChange[];

  /**
   * server auth
   *
   * @generated from field: string token = 3;
   */
  token: string;

  constructor(data?: PartialMessage<UpdateRoomRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.UpdateRoomRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoomRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoomRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoomRequest;

  static equals(a: UpdateRoomRequest | PlainMessage<UpdateRoomRequest> | undefined, b: UpdateRoomRequest | PlainMessage<UpdateRoomRequest> | undefined): boolean;
}

/**
 * @generated from message pokerhero.LeaveRoomRequest
 */
export declare class LeaveRoomRequest extends Message<LeaveRoomRequest> {
  /**
   * @generated from field: int32 room_id = 1;
   */
  roomId: number;

  /**
   * @generated from field: string player_address = 2;
   */
  playerAddress: string;

  /**
   * server auth
   *
   * @generated from field: string token = 3;
   */
  token: string;

  constructor(data?: PartialMessage<LeaveRoomRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.LeaveRoomRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveRoomRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveRoomRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveRoomRequest;

  static equals(a: LeaveRoomRequest | PlainMessage<LeaveRoomRequest> | undefined, b: LeaveRoomRequest | PlainMessage<LeaveRoomRequest> | undefined): boolean;
}

/**
 * @generated from message pokerhero.AllLeaveRoomRequest
 */
export declare class AllLeaveRoomRequest extends Message<AllLeaveRoomRequest> {
  /**
   * server auth
   *
   * @generated from field: string token = 1;
   */
  token: string;

  constructor(data?: PartialMessage<AllLeaveRoomRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.AllLeaveRoomRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllLeaveRoomRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllLeaveRoomRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllLeaveRoomRequest;

  static equals(a: AllLeaveRoomRequest | PlainMessage<AllLeaveRoomRequest> | undefined, b: AllLeaveRoomRequest | PlainMessage<AllLeaveRoomRequest> | undefined): boolean;
}

/**
 * @generated from message pokerhero.EditRoomRequest
 */
export declare class EditRoomRequest extends Message<EditRoomRequest> {
  /**
   * @generated from field: int32 room_id = 1;
   */
  roomId: number;

  /**
   * @generated from field: int32 big_blind = 2;
   */
  bigBlind: number;

  /**
   * server auth
   *
   * @generated from field: string token = 3;
   */
  token: string;

  constructor(data?: PartialMessage<EditRoomRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "pokerhero.EditRoomRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditRoomRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditRoomRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditRoomRequest;

  static equals(a: EditRoomRequest | PlainMessage<EditRoomRequest> | undefined, b: EditRoomRequest | PlainMessage<EditRoomRequest> | undefined): boolean;
}

